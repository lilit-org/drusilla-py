name: Unit Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install hatchling --upgrade
        pip install pytest pytest-cov pytest-asyncio

    - name: Validate and load .env.example
      run: |
        python3 -c "
        import os
        from dotenv import load_dotenv
        from pathlib import Path

        # Check if .env.example exists
        env_file = Path('.env.example')
        if not env_file.exists():
            print('Error: .env.example file not found')
            exit(1)

        # Load .env.example
        load_dotenv(env_file)

        # Validate required variables
        required_vars = {
            'SWORD_ERROR_MESSAGE',
            'RUNCONTEXT_ERROR_MESSAGE',
            'SHIELD_ERROR_MESSAGE'
        }
        missing_vars = [var for var in required_vars if var not in os.environ]
        if missing_vars:
            print(f'Error: Missing required environment variables: {", ".join(missing_vars)}')
            exit(1)

        # Export all variables to GitHub environment
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            for key, value in os.environ.items():
                if key.startswith(('SWORD_', 'RUNCONTEXT_', 'SHIELD_')):
                    f.write(f'{key}={value}\n')
        "

    - name: Test with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/ --cov=src --cov-report=xml
