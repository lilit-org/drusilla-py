[project]
name = "noctira"
version = "0.0.1"
description = "Lilit's Decentralized Agentic Framework"
readme = "README.md"
requires-python = ">=3.10,<4.0"
authors = [{ name = "bt3gl"}]
dependencies = [
    "pydantic",
    "griffe",
    "typing-extensions",
    "requests",
    "types-requests",
    "python-dotenv",
    "httpx>=0.28.1,<0.29.0",
    "autoflake>=2.3.1,<3.0.0",
    "black>=25.1.0,<26.0.0",
    "pre-commit>=4.2.0,<5.0.0"
]

[tool.poetry]
name = "noctira"
version = "0.0.1"
description = "Lilit's Decentralized Agentic Framework"
authors = ["bt3gl"]
readme = "README.md"
packages = [
    { include = "src", from = "." }
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
pydantic = "*"
griffe = "*"
typing-extensions = "*"
requests = "*"
types-requests = "*"
python-dotenv = "*"
httpx = ">=0.28.1,<0.29.0"
autoflake = ">=2.3.1,<3.0.0"
black = ">=25.1.0,<26.0.0"
pre-commit = ">=4.2.0,<5.0.0"

[tool.poetry.group.dev.dependencies]
mypy = "*"
ruff = "0.9.2"
pytest = "*"
pytest-asyncio = "*"
pytest-mock = ">=3.14.0"
rich = "*"
mkdocs = ">=1.6.0"
mkdocs-material = ">=9.6.0"
mkdocstrings = {extras = ["python"], version = ">=0.28.0"}
coverage = ">=7.6.12"
playwright = "1.50.0"
inline-snapshot = ">=0.20.7"
pynput = "*"
types-pynput = "*"
textual = "*"
poetry = ">=1.7.1"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "W291", # trailing whitespace
    "W292", # no newline at end of file
    "W293", # blank line contains whitespace
    "E201", # whitespace after '('
    "E202", # whitespace before ')'
    "E203", # whitespace before ':'
    "E211", # whitespace before '('
    "E221", # multiple spaces before operator
    "E222", # multiple spaces after operator
    "E223", # tab before operator
    "E224", # tab after operator
    "E225", # missing whitespace around operator
    "E226", # missing whitespace around arithmetic operator
    "E231", # missing whitespace after ','
    "E251", # unexpected spaces around keyword / parameter equals
    "E261", # at least two spaces before inline comment
    "E262", # inline comment should start with '# '
    "E271", # multiple spaces after keyword
    "E272", # multiple spaces before keyword
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["E501"]

[tool.mypy]
strict = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "sounddevice.*"
ignore_missing_imports = true

[tool.autoflake]
in-place = true
recursive = true
ignore-init-module-imports = true
remove-all-unused-imports = true
remove-duplicate-keys = true
remove-unused-variables = true

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_also = [
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
    "raise NotImplementedError",
    "logger.debug",
]

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    # This is a warning that is expected to happen: we have an async filter that raises an exception
    "ignore:coroutine 'test_async_input_filter_fails.<locals>.invalid_input_filter' was never awaited:RuntimeWarning",
]
markers = [
    "allow_call_model_methods: mark test as allowing calls to real model implementations",
]

[tool.inline-snapshot]
format-command = "ruff format --stdin-filename {filename}"
