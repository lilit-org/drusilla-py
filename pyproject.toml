[project]
name = "noctira"
version = "0.0.1"
description = "Lilit's Decentralized Agentic Framework"
readme = "README.md"
requires-python = ">=3.10,<4.0"
authors = [{ name = "bt3gl"}]
package-mode = false
dependencies = [
    "pydantic",
    "griffe",
    "typing-extensions",
    "requests",
    "types-requests",
    "python-dotenv",
    "httpx[http2] (>=0.28.1,<0.29.0)",
    "autoflake (>=2.3.1,<3.0.0)",
    "black (>=25.1.0,<26.0.0)",
    "pre-commit (>=4.2.0,<5.0.0)"
]

classifiers = [
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[dependency-groups]
dev = [
    "mypy",
    "ruff==0.9.2",
    "pytest",
    "pytest-asyncio",
    "pytest-mock>=3.14.0",
    "rich",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.0",
    "mkdocstrings[python]>=0.28.0",
    "coverage>=7.6.12",
    "playwright==1.50.0",
    "inline-snapshot>=0.20.7",
    "pynput",
    "types-pynput",
    "textual",
    "black>=24.2.0",
    "poetry>=1.7.1",
    "autoflake>=2.3.1",
    "pre-commit>=3.6.0",
]

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.2"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["E501"]

[tool.mypy]
strict = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "sounddevice.*"
ignore_missing_imports = true

[tool.autoflake]
in-place = true
recursive = true
ignore-init-module-imports = true
remove-all-unused-imports = true
remove-duplicate-keys = true
remove-unused-variables = true

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_also = [
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
    "raise NotImplementedError",
    "logger.debug",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    # This is a warning that is expected to happen: we have an async filter that raises an exception
    "ignore:coroutine 'test_async_input_filter_fails.<locals>.invalid_input_filter' was never awaited:RuntimeWarning",
]
markers = [
    "allow_call_model_methods: mark test as allowing calls to real model implementations",
]

[tool.inline-snapshot]
format-command = "ruff format --stdin-filename {filename}"
